import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

buildscript {

    ext.kotlinVersion = '1.2.70'

    repositories {
        jcenter()   // shadow
        mavenCentral()
        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
        maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
        classpath 'org.apache.ivy:ivy:2.4.0'
    }
}

plugins {
    id "de.undercouch.download" version "3.4.3"
}

apply plugin: 'java'
apply plugin: 'kotlin'

// jitpack
apply plugin: 'maven'
group = 'com.github.kotlin-graphics'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testCompile 'io.kotlintest:kotlintest-runner-junit5:3.1.10'

    compile "com.github.kotlin-graphics:uno-sdk:b45cd3d472fad746915a95c2c2e986dc1decd337"

    compile "net.java.dev.jna:jna:4.5.2"

    ext.lwjglVersion = "3.2.0"
    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows"
            break
        case OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos"
            break
    }
    ["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb", "-vulkan"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        if (it != "-vulkan")
            runtime "org.lwjgl:lwjgl$it:$lwjglVersion:$lwjglNatives"
    }
}

repositories {
    mavenCentral()
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// https://stackoverflow.com/a/47458666/1047713
test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

/**
 * Download all files from a directory in GitHub. Use the GitHub API to get the
 * directory's contents. Parse the result and download the files.
 */
task downloadNatives {
    doLast {
        // download directory listing via GitHub API
        def dirBin = 'https://api.github.com/repos/ValveSoftware/openvr/contents/bin'
//        def dir = 'https://api.github.com/repos/michel-kraemer/gradle-download-task/contents/examples'
        def content_linux32 = new File(buildDir, "directoryContents_linux32.json")
        download {
            src "$dirBin/linux32"
            dest content_linux32
        }
        def content_linux64 = new File(buildDir, "directoryContents_linux64.json")
        download {
            src "$dirBin/linux64"
            dest content_linux64
        }
        def content_win32 = new File(buildDir, "directoryContents_win32.json")
        download {
            src "$dirBin/win32"
            dest content_win32
        }
        def content_win64 = new File(buildDir, "directoryContents_win64.json")
        download {
            src "$dirBin/win64"
            dest content_win64
        }

        def dstDir = sourceSets.main.resources.srcDirs[0]

        // parse directory listing
        def contents_linux32 = new JsonSlurper().parseFile(content_linux32, "utf-8")

        // download files
        download {
            src contents_linux32.collect { it.download_url }
            dest "$dstDir/linux32"
        }

        def contents_linux64 = new JsonSlurper().parseFile(content_linux64, "utf-8")
        download {
            src contents_linux64.collect { it.download_url }
            dest "$dstDir/linux-x86-64"
        }

        def contents_win32 = new JsonSlurper().parseFile(content_win32, "utf-8")
        download {
            src contents_win32.collect { it.download_url }
            dest "$dstDir/win32"
        }

        def contents_win64 = new JsonSlurper().parseFile(content_win64, "utf-8")
        download {
            src contents_win64.collect { it.download_url }
            dest "$dstDir/win32-x86-64"
        }

        // delete downloaded directory listing
        content_linux32.delete()
        content_linux64.delete()
        content_win32.delete()
        content_win64.delete()
    }
}

defaultTasks 'downloadNatives'

//task fetchBinaries {
//    def dir = 'https://github.com/ValveSoftware/openvr/tree/master/bin/linux32/'
//    def urlLister = new org.apache.ivy.util.url.ApacheURLLister()
//    def files = urlLister.listFiles(new URL(dir))
//    download {
//        src files
//        dest "C:\\Users\\Public\\Music"
//    }
//}
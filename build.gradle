import groovy.json.JsonSlurper
import org.gradle.internal.os.OperatingSystem

buildscript {

    ext.kotlinVersion = '1.2.70'

    repositories {
        jcenter()   // shadow
        mavenCentral()
        maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
        maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.2.0"
        classpath 'org.apache.ivy:ivy:2.3.0'
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'

// jitpack
apply plugin: 'maven'
group = 'com.github.kotlin-graphics'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.0.4'

    ext.kx = "com.github.kotlin-graphics"
    implementation "$kx:uno-sdk:51330f26f2"

    ext.lwjglVersion = "3.2.0"
    switch (OperatingSystem.current()) {
        case OperatingSystem.WINDOWS:
            ext.lwjglNatives = "natives-windows"
            break
        case OperatingSystem.LINUX:
            ext.lwjglNatives = "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            ext.lwjglNatives = "natives-macos"
            break
    }
    ["", "-glfw", "-jemalloc", "-openal", "-opengl", "-stb", "-openvr", "-vulkan"].each {
        implementation "org.lwjgl:lwjgl$it:$lwjglVersion"
        runtime "org.lwjgl:lwjgl$it:$lwjglVersion:$lwjglNatives"
    }
}

repositories {
    mavenCentral()
    maven { setUrl("https://dl.bintray.com/kotlin/kotlin-dev") }
    maven { setUrl("http://dl.bintray.com/kotlin/kotlin-eap-1.2") }
    maven { setUrl("https://oss.sonatype.org/content/repositories/snapshots/") }
    maven { setUrl('https://jitpack.io') }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// https://stackoverflow.com/a/47458666/1047713
test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen { false }
        showStandardStreams = true
    }
}